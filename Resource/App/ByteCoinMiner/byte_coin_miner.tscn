[gd_scene load_steps=11 format=3 uid="uid://bl0lc22hoo1s6"]

[ext_resource type="PackedScene" uid="uid://cnm0a8qtvlr0v" path="res://Scene/Element/App.tscn" id="1_i1qye"]
[ext_resource type="Script" uid="uid://clab5i8yoyde3" path="res://Resource/App/ByteCoinMiner/byte_coin_miner.gd" id="2_ru2e1"]
[ext_resource type="Texture2D" uid="uid://8fv5ssprajx1" path="res://Resource/Texture/bytecoin.png" id="3_u0yk6"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_u0yk6"]
bg_color = Color(0.680102, 0.959726, 0.344548, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_rp06f"]
bg_color = Color(0.76459, 0.658334, 0.0975449, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_jg17h"]
bg_color = Color(0.458796, 0.392725, 0.0489848, 1)

[sub_resource type="Shader" id="Shader_dteqo"]
code = "shader_type canvas_item;

uniform float progress : hint_range(0.0, 1.0) = 0.5;
uniform vec4 background_color : source_color = vec4(0.5, 0.5, 0.5, 1.0);
uniform sampler2D color_gradient : source_color;
uniform sampler2D mask_texture : hint_default_white;

// Wave effect parameters
uniform float wave_amplitude : hint_range(0.0, 0.1) = 0.02;
uniform float wave_frequency : hint_range(0.0, 10.0) = 3.0;
uniform float wave_speed : hint_range(0.0, 5.0) = 1.5;

// Particle effect parameters
uniform float particle_speed : hint_range(0.01, 0.5) = 0.05;
uniform float particle_lifetime : hint_range(1.0, 10.0) = 3.0;
uniform float particle_softness : hint_range(0.001, 1.0) = 0.01;
uniform float particle_spacing : hint_range(0.01, 1.0) = 0.1;
uniform vec2 particle_offset = vec2(0.0, 0.0);
uniform vec2 particle_start_scale = vec2(0.02, 0.02);
uniform vec2 particle_end_scale = vec2(0.01, 0.01);
uniform float particle_scale_randomness : hint_range(0.0, 1.0) = 0.5;
uniform sampler2D particle_alpha_gradient : source_color;
uniform int particle_amount : hint_range(0, 50) = 20;

// Pseudo-random function
float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

// Function to generate a single particle
float particle(vec2 uv, float particle_id, float time, float mask_value) {
    float random_offset = rand(vec2(particle_id, 0.0));
    float spawn_time = particle_id * particle_spacing;
    float life = mod(time - spawn_time, particle_lifetime) / particle_lifetime;
    
    if (life < 0.0 || life >= 1.0) return 0.0;
    
    float vertical_pos = rand(vec2(particle_id, 1.0));
    float horizontal_pos = progress + life * particle_speed;
    
    vec2 particle_pos = vec2(horizontal_pos, vertical_pos) + particle_offset;
    
    // Calculate scale with randomness
    float scale_random = rand(vec2(particle_id, 2.0)) * particle_scale_randomness;
    vec2 start_scale = particle_start_scale * (1.0 - scale_random);
    vec2 end_scale = particle_end_scale * (1.0 - scale_random);
    vec2 current_scale = mix(start_scale, end_scale, life);
    
    vec2 scaled_uv = (uv - particle_pos) / current_scale;
    float dist = length(scaled_uv);
    
    float alpha = texture(particle_alpha_gradient, vec2(life, 0.5)).a;
    
    return smoothstep(1.0 + particle_softness, 1.0, dist) * alpha * mask_value;
}

void fragment() {
    vec2 uv = UV;
    
    // Sample the mask texture or use default (fully visible) if not provided
    float mask = texture(mask_texture, uv).r;
    
    // Calculate wave offset
    float wave_offset = wave_amplitude * sin(wave_frequency * uv.y + TIME * wave_speed);
    
    // Apply wave offset to progress
    float wave_progress = progress + wave_offset;
    
    // Sample the color from the gradient texture based on progress
    vec4 gradient_color = texture(color_gradient, vec2(progress, 0.5));
    
    // Start with the background color
    vec4 final_color = background_color;
    
    // Apply the progress bar with mask
    if (uv.x < wave_progress) {
        final_color = mix(background_color, gradient_color, mask);
    }
    
    // Generate particles
    float particles = 0.0;
    for (float i = 0.0; i < float(particle_amount); i++) {
        particles += particle(uv, i, TIME, mask);
    }
    particles = clamp(particles, 0.0, 1.0);
    
    // Add particles to the final color
    final_color = mix(final_color, gradient_color, particles * step(uv.x, 1.0));
    
    COLOR = final_color;
}"

[sub_resource type="Gradient" id="Gradient_twryh"]
colors = PackedColorArray(1, 1, 1, 1, 0, 1, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_guiby"]
gradient = SubResource("Gradient_twryh")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_u0yk6"]
resource_local_to_scene = true
shader = SubResource("Shader_dteqo")
shader_parameter/progress = 0.259
shader_parameter/background_color = Color(0.639216, 0.423529, 0.564706, 0)
shader_parameter/color_gradient = SubResource("GradientTexture1D_guiby")
shader_parameter/wave_amplitude = 0.013
shader_parameter/wave_frequency = 10.0
shader_parameter/wave_speed = 2.146
shader_parameter/particle_speed = 0.05
shader_parameter/particle_lifetime = 3.0
shader_parameter/particle_softness = 0.01
shader_parameter/particle_spacing = 0.1
shader_parameter/particle_offset = Vector2(0, 0)
shader_parameter/particle_start_scale = Vector2(0.02, 0.02)
shader_parameter/particle_end_scale = Vector2(0.01, 0.01)
shader_parameter/particle_scale_randomness = 0.5
shader_parameter/particle_amount = 0

[node name="ByteCoinMiner" instance=ExtResource("1_i1qye")]
script = ExtResource("2_ru2e1")
heat_cost_per_sec = 1.5
progress_speed = 0.2
coin_per_mine = 1
app_name = "byte coin miner.auto"
app_resource_id = "byte_coin_miner"

[node name="MineToggleButton" type="CheckButton" parent="VBoxContainer" index="0"]
process_mode = 3
custom_minimum_size = Vector2(0, 50)
layout_mode = 2
size_flags_vertical = 3
focus_mode = 0
mouse_filter = 1
theme_override_styles/hover_pressed = SubResource("StyleBoxFlat_u0yk6")
theme_override_styles/hover = SubResource("StyleBoxFlat_rp06f")
theme_override_styles/pressed = SubResource("StyleBoxFlat_u0yk6")
theme_override_styles/normal = SubResource("StyleBoxFlat_jg17h")
text = "Turned on"
expand_icon = true

[node name="Progress" type="ColorRect" parent="VBoxContainer" index="1"]
material = SubResource("ShaderMaterial_u0yk6")
layout_mode = 2
size_flags_vertical = 3
mouse_filter = 2

[node name="TextureRect" type="TextureRect" parent="VBoxContainer/Progress" index="0"]
custom_minimum_size = Vector2(32, 32)
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -16.0
offset_top = -16.0
offset_right = 16.0
offset_bottom = 16.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
texture = ExtResource("3_u0yk6")
expand_mode = 1
stretch_mode = 5

[node name="TextureRect" parent="VBoxContainer" index="2"]
visible = false
custom_minimum_size = Vector2(32, 32)
texture = ExtResource("3_u0yk6")
expand_mode = 1
stretch_mode = 5

[node name="Button" parent="." index="1"]
mouse_filter = 2

[connection signal="toggled" from="VBoxContainer/MineToggleButton" to="." method="_on_mine_toggle_button_toggled"]
